---
import { getCollection } from 'astro:content'
import BaseLayout from '../layouts/BaseLayout.astro'
import LibraryItem from '../components/LibraryItem.astro'
import LazyLoadList from '../components/LazyLoadList'

const pageTitle = 'TV Shows'
const allTvShows = (await getCollection('tvShows')).map((item) => ({ ...item, source: 'tvShows' }))

// Sort TV shows by publication date (newest first)
const sortedTvShows = allTvShows
  .filter((item) => item.data.pubDate) // Filter out items without dates
  .sort((a, b) => {
    // Prioritize 'updatedDate' over 'pubDate' if it exists
    const rawDateA = a.data.updatedDate || a.data.pubDate
    const rawDateB = b.data.updatedDate || b.data.pubDate
    const dateA = rawDateA
      ? typeof rawDateA === 'string'
        ? new Date(rawDateA)
        : rawDateA
      : new Date(0)
    const dateB = rawDateB
      ? typeof rawDateB === 'string'
        ? new Date(rawDateB)
        : rawDateB
      : new Date(0)
    return dateB.getTime() - dateA.getTime()
  })

// Only render first 12 items
const initialTvShows = sortedTvShows.slice(0, 12)
---

<BaseLayout pageTitle={pageTitle}>
  <h1 class='text-tx-0 text-h1 font-heading mb-3'>{pageTitle}</h1>

  <p class='text-tx-2 mb-8'>TV shows I've watched, with ratings and thoughts.</p>

  <ul class='space-y-0'>
    {
      initialTvShows.map((tvShow, index) => {
        // Use eager loading for first 3 items (above the fold), lazy for the rest
        const loading = index < 3 ? 'eager' : 'lazy'

        return (
          <>
            <LibraryItem
              url={`/tv-shows/${tvShow.id}/`}
              title={tvShow.data.title}
              pubDate={tvShow.data.updatedDate || tvShow.data.pubDate}
              source={tvShow.source}
              imageUrl={'imageUrl' in tvShow.data ? tvShow.data.imageUrl : undefined}
              imageAlt={'imageAlt' in tvShow.data ? tvShow.data.imageAlt : undefined}
              inProgress={'inProgress' in tvShow.data ? tvShow.data.inProgress : undefined}
              year={'year' in tvShow.data ? tvShow.data.year : undefined}
              rating={'rating' in tvShow.data ? tvShow.data.rating : undefined}
              description={'description' in tvShow.data ? tvShow.data.description : undefined}
              loading={loading}
            />
          </>
        )
      })
    }

    <LazyLoadList
      client:load
      initialCount={12}
      totalCount={sortedTvShows.length}
      contentType='tvShows'
    />
  </ul>
</BaseLayout>
