---
import { Image } from 'astro:assets'
import { Icon } from 'astro-icon/components'
import Rating from './Rating.astro'

const {
  url,
  title,
  pubDate,
  imageAlt,
  imageUrl,
  source,
  inProgress,
  year,
  rating,
  description,
  author,
  content,
  loading = 'lazy', // Default to lazy loading
} = Astro.props

// Function to format date as relative time or formatted date
function formatDate(pubDate: Date | string): string {
  // Convert string to Date if needed
  const dateObj = typeof pubDate === 'string' ? new Date(pubDate) : pubDate

  // Get current time
  const now = new Date()

  // Calculate time difference in milliseconds
  const diffTime = now.getTime() - dateObj.getTime()
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))
  const diffHours = Math.floor(diffTime / (1000 * 60 * 60))
  const diffMinutes = Math.floor(diffTime / (1000 * 60))

  // If the date is in the future, just show the formatted date
  if (diffTime < 0) {
    const months = [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec',
    ]
    const month = months[dateObj.getMonth()]
    const day = dateObj.getDate()
    const year = dateObj.getFullYear()

    // Include year if not current year
    if (year !== now.getFullYear()) {
      return `${month} ${day}, ${year}`
    }
    return `${month} ${day}`
  }

  // If less than an hour, show minutes
  if (diffMinutes < 60 && diffMinutes > 0) {
    return `${diffMinutes}m ago`
  }

  // If less than a day, show hours
  if (diffHours < 24 && diffHours > 0) {
    return `${diffHours}h ago`
  }

  // If within the past week, show relative time
  if (diffDays <= 7 && diffDays > 0) {
    if (diffDays === 1) return '1d ago'
    if (diffDays === 2) return '2d ago'
    if (diffDays === 3) return '3d ago'
    if (diffDays === 4) return '4d ago'
    if (diffDays === 5) return '5d ago'
    if (diffDays === 6) return '6d ago'
    if (diffDays === 7) return '7d ago'
  }

  // For older dates, format as "Sep 16" or "Sep 16, 2024" if not current year
  const months = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec',
  ]
  const month = months[dateObj.getMonth()]
  const day = dateObj.getDate()
  const year = dateObj.getFullYear()

  // Include year if not current year
  if (year !== now.getFullYear()) {
    return `${month} ${day}, ${year}`
  }
  return `${month} ${day}`
}
---

<li class='py-8 dashed-border'>
  <p class='mb-4 text-sm text-tx-3'>
    <a href={url}>
      {source === 'books' && (inProgress ? 'Started' : 'Read')}
      {(source === 'movies' || source === 'tvShows') && (inProgress ? 'Started' : 'Watched')}
      {source === 'games' && (inProgress ? 'Played' : 'Played')}
      {formatDate(pubDate)}</a
    >
  </p>
  <div class='flex flex-row gap-6'>
    {
      (source === 'movies' || source === 'tvShows' || source === 'games' || source === 'books') &&
        imageUrl && (
          <Image
            src={imageUrl}
            alt={imageAlt || title || 'Content image'}
            width={160}
            height={240}
            class='w-20 h-full rounded-sm'
            loading={loading}
            decoding='async'
            quality={'high'}
          />
        )
    }
    <div>
      <div class='pb-1 text-sm'>
        {
          source === 'movies' && year && (
            <div class='flex gap-1.5 items-center text-tx-movie'>
              <Icon size={16} name='tabler:movie' class='' />
              <p>{year} movie</p>
            </div>
          )
        }
        {
          source === 'tvShows' && year && (
            <div class='flex gap-1.5 items-center text-tx-tv'>
              <Icon size={16} name='tabler:device-tv-old' class='' />
              <p>{year} TV show</p>
            </div>
          )
        }
        {
          source === 'games' && year && (
            <div class='flex gap-1.5 items-center text-tx-game'>
              <Icon size={16} name='tabler:device-gamepad-2' class='' />
              <p>{year} game</p>
            </div>
          )
        }
        {
          source === 'books' && year && (
            <div class='flex gap-1.5 items-center text-tx-book'>
              <Icon size={16} name='tabler:book' class='' />
              <p>{year} book</p>
            </div>
          )
        }
      </div>
      {
        title && (
          <a href={url}>
            <h2 class='text-h3 font-heading hover:text-tx-1 text-tx-0'>{title}</h2>
          </a>
        )
      }
      {source === 'books' && author && <p class='pt-0.5 text-sm text-tx-1'>{author}</p>}

      {/* Show markdown content for blog entries */}
      {
        content && source === 'blog' && (
          <div class='mt-3 mb-4 max-w-none prose prose-base'>
            <content.Content />
          </div>
        )
      }

      {
        (source === 'movies' || source === 'tvShows' || source === 'games' || source === 'books') &&
          rating !== undefined &&
          rating !== null &&
          rating !== 0 && <Rating rating={rating} />
      }
      {
        (source === 'movies' || source === 'tvShows' || source === 'games' || source === 'books') &&
          (rating === undefined || rating === null || rating === 0) &&
          description && <p class='mt-2 text-sm line-clamp-2 text-tx-3'>{description}</p>
      }
    </div>
  </div>
</li>

<style>
  .dashed-border {
    position: relative;
  }

  .dashed-border::after {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent 4px,
      var(--color-ui-1) 4px,
      var(--color-ui-1) 8px
    );
    background-size: 8px 1px;
  }
</style>
