---
import { getCollection, render } from 'astro:content'
import BaseLayout from '../layouts/BaseLayout.astro'
import BookmarkPost from '../components/BookmarkPost.astro'

const pageTitle = 'Bookmarks'
const allBookmarks = await Promise.all(
  (await getCollection('bookmarks')).map(async (item) => {
    const { Content } = await render(item)
    return { ...item, source: 'bookmarks', renderedContent: { Content } }
  })
)

// Sort bookmarks by publication date (newest first)
const sortedBookmarks = allBookmarks
  .filter((item) => item.data.pubDate) // Filter out items without dates
  .sort((a, b) => {
    const dateA = a.data.pubDate
      ? typeof a.data.pubDate === 'string'
        ? new Date(a.data.pubDate)
        : a.data.pubDate
      : new Date(0)
    const dateB = b.data.pubDate
      ? typeof b.data.pubDate === 'string'
        ? new Date(b.data.pubDate)
        : b.data.pubDate
      : new Date(0)
    return dateB.getTime() - dateA.getTime()
  })
---

<BaseLayout pageTitle={pageTitle}>
  <h1 class='mb-3 text-tx-0 text-h1 font-heading'>{pageTitle}</h1>
  <p class='mb-8 text-tx-2'>
    A collection of interesting resources, links, and bookmarks I've saved.
  </p>

  <ul class='space-y-0'>
    {
      sortedBookmarks.map((bookmark, index) => {
        // Use eager loading for first 3 items (above the fold), lazy for the rest
        const loading = index < 3 ? 'eager' : 'lazy'

        return (
          <BookmarkPost
            url={`/bookmarks/${bookmark.id}/`}
            title={bookmark.data.title}
            sourceTitle={bookmark.data.sourceTitle}
            pubDate={bookmark.data.pubDate}
            source={bookmark.source}
            loading={loading}
            sourceUrl={
              'source' in bookmark.data && bookmark.data.source ? bookmark.data.source : undefined
            }
            imageUrl={'imageUrl' in bookmark.data ? bookmark.data.imageUrl : undefined}
            faviconUrl={'faviconUrl' in bookmark.data ? bookmark.data.faviconUrl : undefined}
            description={'description' in bookmark.data ? bookmark.data.description : undefined}
            content={'renderedContent' in bookmark ? bookmark.renderedContent : undefined}
          />
        )
      })
    }
  </ul>
</BaseLayout>
