---
import { getCollection } from 'astro:content'
import BaseLayout from '../layouts/BaseLayout.astro'
import LibraryItem from '../components/LibraryItem.astro'

const pageTitle = 'TV Shows'
const allTvShows = (await getCollection('tvShows')).map((item) => ({ ...item, source: 'tvShows' }))

// Sort TV shows by publication date (newest first)
const sortedTvShows = allTvShows
  .filter((item) => item.data.pubDate) // Filter out items without dates
  .sort((a, b) => {
    const dateA = a.data.pubDate
      ? typeof a.data.pubDate === 'string'
        ? new Date(a.data.pubDate)
        : a.data.pubDate
      : new Date(0)
    const dateB = b.data.pubDate
      ? typeof b.data.pubDate === 'string'
        ? new Date(b.data.pubDate)
        : b.data.pubDate
      : new Date(0)
    return dateB.getTime() - dateA.getTime()
  })
---

<BaseLayout pageTitle={pageTitle}>
  <h1 class='mb-3 text-tx-0 text-h1 font-heading'>{pageTitle}</h1>

  <p class='mb-8 text-tx-2'>TV shows I've watched, with ratings and thoughts.</p>

  <ul class='space-y-0'>
    {
      sortedTvShows.map((tvShow, index) => {
        // Use eager loading for first 3 items (above the fold), lazy for the rest
        const loading = index < 3 ? 'eager' : 'lazy'

        return (
          <LibraryItem
            url={`/tv-shows/${tvShow.id}/`}
            title={tvShow.data.title}
            pubDate={tvShow.data.pubDate}
            source={tvShow.source}
            imageUrl={'imageUrl' in tvShow.data ? tvShow.data.imageUrl : undefined}
            imageAlt={'imageAlt' in tvShow.data ? tvShow.data.imageAlt : undefined}
            inProgress={'inProgress' in tvShow.data ? tvShow.data.inProgress : undefined}
            year={'year' in tvShow.data ? tvShow.data.year : undefined}
            rating={'rating' in tvShow.data ? tvShow.data.rating : undefined}
            description={'description' in tvShow.data ? tvShow.data.description : undefined}
            loading={loading}
          />
        )
      })
    }
  </ul>
</BaseLayout>
