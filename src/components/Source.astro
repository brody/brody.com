---
import { Image } from 'astro:assets'
import { Icon } from 'astro-icon/components'
import fs from 'fs'
import path from 'path'

// Load favicon manifest
let faviconManifest: Record<string, any> = {}
try {
  const manifestPath = path.join(process.cwd(), 'public/favicons/manifest.json')
  if (fs.existsSync(manifestPath)) {
    const manifestContent = fs.readFileSync(manifestPath, 'utf-8')
    faviconManifest = JSON.parse(manifestContent)
  }
} catch (error) {
  console.warn('Could not load favicon manifest:', (error as Error).message)
}

const {
  sourceTitle,
  faviconUrl,
  url,
  imageUrl,
  loading = 'lazy',
  width = 580,
  height = 320,
} = Astro.props

// Extract base URL from the full URL
function getBaseUrl(url: string): string {
  try {
    const urlObj = new URL(url)
    return urlObj.hostname.replace('www.', '')
  } catch {
    return url
  }
}

// Get full base URL with protocol for favicon handling
function getFullBaseUrl(url: string): string {
  try {
    const urlObj = new URL(url)
    return `${urlObj.protocol}//${urlObj.hostname}`
  } catch {
    return url
  }
}

const baseUrl = getBaseUrl(url)
const fullBaseUrl = getFullBaseUrl(url)

// Check if we have a local favicon in the manifest
const siteBaseUrl = getBaseUrl(url)
const localFaviconEntry = faviconManifest[siteBaseUrl]
const localFaviconPath = localFaviconEntry ? localFaviconEntry.localPath : null

// Process favicon URL - use local if available, otherwise external
const processedFaviconUrl =
  localFaviconPath ||
  (faviconUrl && faviconUrl.startsWith('/') ? `${fullBaseUrl}${faviconUrl}` : faviconUrl)
const articleTitle = sourceTitle?.includes(' - ')
  ? sourceTitle.split(' - ').slice(0, -1).join(' - ')
  : sourceTitle
---

{
  imageUrl ? (
    <a
      href={url}
      target='_blank'
      class='flex overflow-hidden relative flex-col mt-6 rounded-xl border not-prose hover:border-ui-3 hover:bg-ui-1 bg-bg-2 border-ui-2'
    >
      <Image
        src={imageUrl}
        alt={articleTitle || 'Article image'}
        width={width}
        height={height}
        class='object-cover w-full max-h-80'
        loading={loading}
        densities={[2, 3]}
      />

      <div class='absolute bottom-0 left-0 h-[120px] w-full bg-gradient-to-t from-black to-transparent opacity-60' />
      <div
        class='absolute right-2 bottom-2 left-2 px-4 py-3 rounded-lg bg-white/[5%] transition hover:bg-white/[10%]'
        style='backdrop-filter: blur(32px); box-shadow: rgba(255, 255, 255, 0.3) 0px 1px 2px 0px inset;'
      >
        <div class='flex gap-2 justify-between items-start text-sm leading-[1.4] text-tx-0'>
          <p class='flex-1 mb-1 line-clamp-2'>{articleTitle ? <>{articleTitle}</> : null}</p>
          <Icon name='tabler:external-link' size={16} class='flex-shrink-0 mt-0.5 text-tx-1' />
        </div>
        <div class='flex gap-1.5 items-center'>
          {processedFaviconUrl &&
            (localFaviconPath ? (
              <Image
                src={processedFaviconUrl}
                alt={baseUrl}
                width={24}
                height={24}
                class='object-contain w-3 h-3'
                loading={loading}
                densities={[2, 3]}
              />
            ) : (
              <img
                src={processedFaviconUrl}
                alt={baseUrl}
                width='24'
                height='24'
                class='object-contain w-3 h-3'
                loading={loading}
                onerror="this.style.display='none'"
              />
            ))}
          <p class='text-sm leading-[1.4] text-tx-1'>{baseUrl}</p>
        </div>
        {/* {description && <p class='mt-1 text-sm text-tx-2 line-clamp-2'>{description}</p>} */}
      </div>
      <div
        class='absolute right-2 bottom-2 left-2 px-4 py-3 rounded-lg bg-white/[5%] transition hover:bg-white/[10%]'
        style='backdrop-filter: blur(32px); box-shadow: rgba(255, 255, 255, 0.3) 0px 1px 2px 0px inset;'
      >
        <div class='flex gap-2 justify-between items-start text-sm leading-[1.4] text-tx-0'>
          <p class='flex-1 mb-1 line-clamp-2'>{articleTitle ? <>{articleTitle}</> : null}</p>
          <Icon name='tabler:external-link' size={16} class='flex-shrink-0 mt-0.5 text-tx-1' />
        </div>
        <div class='flex gap-1.5 items-center'>
          {processedFaviconUrl &&
            (localFaviconPath ? (
              <Image
                src={processedFaviconUrl}
                alt={baseUrl}
                width={24}
                height={24}
                class='object-contain w-3 h-3'
                loading={loading}
                densities={[2, 3]}
              />
            ) : (
              <img
                src={processedFaviconUrl}
                alt={baseUrl}
                width='24'
                height='24'
                class='object-contain w-3 h-3'
                loading={loading}
                onerror="this.style.display='none'"
              />
            ))}
          <p class='text-sm leading-[1.4] text-tx-1'>{baseUrl}</p>
        </div>
        {/* {description && <p class='mt-1 text-sm text-tx-2 line-clamp-2'>{description}</p>} */}
      </div>
    </a>
  ) : (
    <a
      href={url}
      target='_blank'
      class='flex overflow-hidden flex-col px-4 py-3 mt-6 rounded-md border not-prose hover:border-ui-3 hover:bg-ui-1 bg-bg-2 border-ui-2'
    >
      <div class='flex gap-2 justify-between items-start text-sm leading-[1.4] text-tx-0'>
        <p class='flex-1 mb-1 line-clamp-2'>{articleTitle ? <>{articleTitle}</> : null}</p>
        <Icon name='tabler:external-link' size={16} class='flex-shrink-0 mt-0.5 text-tx-1' />
      </div>
      <div class='flex gap-1.5 items-center'>
        {processedFaviconUrl &&
          (localFaviconPath ? (
            <Image
              src={processedFaviconUrl}
              alt={baseUrl}
              width={24}
              height={24}
              class='object-contain w-3 h-3'
              loading={loading}
              densities={[2, 3]}
            />
          ) : (
            <img
              src={processedFaviconUrl}
              alt={baseUrl}
              width='24'
              height='24'
              class='object-contain w-3 h-3'
              loading={loading}
              onerror="this.style.display='none'"
            />
          ))}
        <p class='text-sm leading-[1.4] text-tx-1'>{baseUrl}</p>
      </div>
      {/* {description && <p class='mt-1 text-sm text-tx-2 line-clamp-2'>{description}</p>} */}
    </a>
  )
}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
