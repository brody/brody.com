---
import { getCollection } from 'astro:content'
import BaseLayout from '../layouts/BaseLayout.astro'
import LibraryItem from '../components/LibraryItem.astro'
import LazyLoadList from '../components/LazyLoadList'

const pageTitle = 'Books'
const allBooks = (await getCollection('books')).map((item) => ({
  ...item,
  source: 'books',
  data: {
    ...item.data,
    pubDate: item.data.datePublished || item.data.pubDate,
    imageUrl: item.data.imageUrl || item.data.imageUrl,
    imageAlt: item.data.title,
    year: item.data.year,
    rating: item.data.rating,
  },
}))

// Sort books by publication date (newest first)
const sortedBooks = allBooks
  .filter((item) => item.data.pubDate) // Filter out items without dates
  .sort((a, b) => {
    const dateA = a.data.pubDate
      ? typeof a.data.pubDate === 'string'
        ? new Date(a.data.pubDate)
        : a.data.pubDate
      : new Date(0)
    const dateB = b.data.pubDate
      ? typeof b.data.pubDate === 'string'
        ? new Date(b.data.pubDate)
        : b.data.pubDate
      : new Date(0)
    return dateB.getTime() - dateA.getTime()
  })

// Only render first 12 items
const initialBooks = sortedBooks.slice(0, 12)
---

<BaseLayout pageTitle={pageTitle}>
  <h1 class='text-tx-0 text-h1 font-heading mb-3'>{pageTitle}</h1>

  <p class='text-tx-2 mb-8'>Books I've read, with ratings and thoughts.</p>

  <ul class='space-y-0'>
    {
      initialBooks.map((book, index) => {
        // Use eager loading for first 3 items (above the fold), lazy for the rest
        const loading = index < 3 ? 'eager' : 'lazy'

        return (
          <>
            <LibraryItem
              url={`/books/${book.id}/`}
              title={book.data.title}
              pubDate={book.data.pubDate}
              source={book.source}
              imageUrl={book.data.imageUrl}
              imageAlt={book.data.imageAlt}
              inProgress={'inProgress' in book.data ? book.data.inProgress : undefined}
              year={book.data.year}
              rating={book.data.rating}
              author={'author' in book.data ? book.data.author : undefined}
              description={'description' in book.data ? book.data.description : undefined}
              loading={loading}
            />
          </>
        )
      })
    }

    <LazyLoadList
      client:load
      initialCount={12}
      totalCount={sortedBooks.length}
      contentType='books'
    />
  </ul>
</BaseLayout>
