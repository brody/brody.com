---
import { getCollection, render } from 'astro:content'
import BaseLayout from '../layouts/BaseLayout.astro'
import NotePost from '../components/NotePost.astro'
import LazyLoadList from '../components/LazyLoadList'

const pageTitle = 'Notes'
const allNotes = await Promise.all(
  (await getCollection('notes')).map(async (item) => {
    const { Content } = await render(item)
    return { ...item, source: 'notes', renderedContent: { Content } }
  })
)

// Sort notes by publication date (newest first)
const sortedNotes = allNotes
  .filter((item) => item.data.pubDate) // Filter out items without dates
  .sort((a, b) => {
    // Prioritize 'updatedDate' over 'pubDate' if it exists
    const rawDateA = a.data.updatedDate || a.data.pubDate
    const rawDateB = b.data.updatedDate || b.data.pubDate
    const dateA = rawDateA
      ? typeof rawDateA === 'string'
        ? new Date(rawDateA)
        : rawDateA
      : new Date(0)
    const dateB = rawDateB
      ? typeof rawDateB === 'string'
        ? new Date(rawDateB)
        : rawDateB
      : new Date(0)
    return dateB.getTime() - dateA.getTime()
  })

// Only render first 12 items
const initialNotes = sortedNotes.slice(0, 12)
---

<BaseLayout pageTitle={pageTitle}>
  <h1 class='text-tx-0 text-h1 font-heading mb-3'>{pageTitle}</h1>
  <p class='text-tx-2 mb-8'>Personal notes, thoughts, and observations I've written down.</p>

  <ul class='space-y-0'>
    {
      initialNotes.map((note, index) => {
        // Use eager loading for first 3 items (above the fold), lazy for the rest
        const loading = index < 3 ? 'eager' : 'lazy'

        return (
          <>
            <NotePost
              url={`/notes/${note.id}/`}
              title={note.data.title || note.id}
              pubDate={note.data.updatedDate || note.data.pubDate}
              source={note.source}
              loading={loading}
              imageUrl={'imageUrl' in note.data ? note.data.imageUrl : undefined}
              description={'description' in note.data ? note.data.description : undefined}
              content={'renderedContent' in note ? note.renderedContent : undefined}
            />
          </>
        )
      })
    }

    <LazyLoadList
      client:load
      initialCount={12}
      totalCount={sortedNotes.length}
      contentType='notes'
    />
  </ul>
</BaseLayout>
