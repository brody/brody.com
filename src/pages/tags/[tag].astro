---
import { getCollection, render } from 'astro:content'
import BaseLayout from '../../layouts/BaseLayout.astro'
import LibraryItem from '../../components/LibraryItem.astro'
import ArticlePost from '../../components/ArticlePost.astro'
import BookmarkPost from '../../components/BookmarkPost.astro'
import NotePost from '../../components/NotePost.astro'

export async function getStaticPaths() {
  // Get all collections with tags
  const allPosts = await getCollection('blog')
  const allBookmarks = await getCollection('bookmarks')
  const allNotes = await getCollection('notes')
  const allBooks = await getCollection('books')

  // Get all unique tags from all collections
  const allTags = [
    ...allPosts.flatMap((post) => post.data.tags || []),
    ...allBookmarks.flatMap((bookmark) => bookmark.data.tags || []),
    ...allNotes.flatMap((note) => note.data.tags || []),
    ...allBooks.flatMap((book) => book.data.tags || []),
  ]
  const uniqueTags = [...new Set(allTags)]

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts
      .filter((post) => post.data.tags?.includes(tag))
      .map((item) => ({ ...item, source: 'blog' }))
    const filteredBookmarks = allBookmarks
      .filter((bookmark) => bookmark.data.tags?.includes(tag))
      .map((item) => ({ ...item, source: 'bookmarks' }))
    const filteredNotes = allNotes
      .filter((note) => note.data.tags?.includes(tag))
      .map((item) => ({ ...item, source: 'notes' }))
    const filteredBooks = allBooks
      .filter((book) => book.data.tags?.includes(tag))
      .map((item) => ({
        ...item,
        source: 'books',
        data: {
          ...item.data,
          pubDate: item.data.datePublished || item.data.pubDate,
        },
      }))

    const allItems = [...filteredPosts, ...filteredBookmarks, ...filteredNotes, ...filteredBooks]
      .filter((item) => item.data.pubDate) // Filter out items without dates
      .sort((a, b) => {
        // Prioritize 'updatedDate' over 'pubDate' if it exists
        const rawDateA = a.data.updatedDate || a.data.pubDate
        const rawDateB = b.data.updatedDate || b.data.pubDate
        const dateA = rawDateA
          ? typeof rawDateA === 'string'
            ? new Date(rawDateA)
            : rawDateA
          : new Date(0)
        const dateB = rawDateB
          ? typeof rawDateB === 'string'
            ? new Date(rawDateB)
            : rawDateB
          : new Date(0)
        return dateB.getTime() - dateA.getTime()
      })

    return {
      params: { tag },
      props: { items: allItems },
    }
  })
}

const { tag } = Astro.params
const { items } = Astro.props

// Render content for posts, bookmarks, and notes
const itemsWithContent = await Promise.all(
  items.map(async (item) => {
    if (item.source === 'blog' || item.source === 'bookmarks' || item.source === 'notes') {
      const { Content } = await render(item)
      return { ...item, renderedContent: { Content } }
    }
    return item
  })
)
---

<BaseLayout pageTitle={tag}>
  <h1 class='text-tx-0 text-h1 font-heading mb-3'>#{tag}</h1>
  <p class='text-tx-2 mb-8'>Content tagged with {tag}</p>
  <ul class='space-y-0'>
    {
      itemsWithContent.map((item, index) => {
        const loading = index < 3 ? 'eager' : 'lazy'

        if (item.source === 'blog') {
          return (
            <ArticlePost
              url={`/posts/${item.id}/`}
              title={item.data.title}
              pubDate={item.data.updatedDate || item.data.pubDate}
              source={item.source}
              imageUrl={'imageUrl' in item.data ? item.data.imageUrl : undefined}
              imageAlt={'imageAlt' in item.data ? item.data.imageAlt : undefined}
              content={'renderedContent' in item ? item.renderedContent : undefined}
              loading={loading}
            />
          )
        } else if (item.source === 'bookmarks') {
          return (
            <BookmarkPost
              url={`/bookmarks/${item.id}/`}
              title={item.data.title}
              pubDate={item.data.updatedDate || item.data.pubDate}
              source={item.source}
              sourceTitle={'sourceTitle' in item.data ? item.data.sourceTitle : undefined}
              sourceUrl={'source' in item.data ? item.data.source : undefined}
              imageUrl={'imageUrl' in item.data ? item.data.imageUrl : undefined}
              faviconUrl={'faviconUrl' in item.data ? item.data.faviconUrl : undefined}
              author={'author' in item.data ? item.data.author : undefined}
              content={'renderedContent' in item ? item.renderedContent : undefined}
              loading={loading}
            />
          )
        } else if (item.source === 'notes') {
          return (
            <NotePost
              url={`/notes/${item.id}/`}
              title={item.data.title || item.id}
              pubDate={item.data.updatedDate || item.data.pubDate}
              source={item.source}
              loading={loading}
              imageUrl={'imageUrl' in item.data ? item.data.imageUrl : undefined}
              description={'description' in item.data ? item.data.description : undefined}
              content={'renderedContent' in item ? item.renderedContent : undefined}
            />
          )
        } else if (item.source === 'books') {
          return (
            <LibraryItem
              url={`/books/${item.id}/`}
              title={item.data.title}
              pubDate={item.data.updatedDate || item.data.pubDate}
              source={item.source}
              imageUrl={'imageUrl' in item.data ? item.data.imageUrl : undefined}
              imageAlt={item.data.title}
              year={'year' in item.data ? item.data.year : undefined}
              rating={'rating' in item.data ? item.data.rating : undefined}
              description={'description' in item.data ? item.data.description : undefined}
              author={'author' in item.data ? item.data.author : undefined}
              loading={loading}
            />
          )
        }
      })
    }
  </ul>
</BaseLayout>
